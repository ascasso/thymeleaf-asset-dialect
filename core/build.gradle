plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group = 'io.github.thymeleaf.assetdialect'
version = '0.0.3-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

dependencies {
    // address vulnerability flagged in name: 'spring-boot-starter-web', version: '3.4.1'
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    compileOnly group: 'ch.qos.logback', name: 'logback-classic', version: '1.5.18'

    // https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf-spring6
    api group: 'org.thymeleaf', name: 'thymeleaf-spring6', version: '3.1.3.RELEASE'

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web
    api group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: "${springBootVersion}"

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-configuration-processor
    compileOnly group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: "${springBootVersion}"

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: "${springBootVersion}"

    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.13.3'

    // https://mvnrepository.com/artifact/org.assertj/assertj-core
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.27.3'

    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.18.0'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
}

publishing {
    publications {
        create('maven', MavenPublication) {
            from components.java
            pom {
                name = 'Thymeleaf Asset Manager'
                description = 'A Thymeleaf dialect for managing static assets with CDN support'
                url = 'https://github.com/ascasso/thymeleaf-asset-manager'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'ascasso'
                        name = 'Andrea Scasso'
                        email = 'andrea@scasso.com'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/ascasso/thymeleaf-asset-dialect.git'
                    developerConnection = 'scm:git:ssh://github.com:ascasso/thymeleaf-asset-dialect.git'
                    url = 'https://github.com/ascasso/thymeleaf-asset-dialect/tree/main'
                }
            }
        }
    }

    repositories {
        maven {
            name = 'OSSRH'
            url = version.endsWith('SNAPSHOT')
                    ? 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                    : 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = project.findProperty('ossrhUsername') ?: ''
                password = project.findProperty('ossrhPassword') ?: ''
            }
        }
    }
}

signing {
    def signingKey = findProperty('signingKey')
    def signingPassword = findProperty('signingPassword')

    if (signingKey && signingPassword) {
        useInMemoryPgpKeys(signingKey as String, signingPassword as String)
        sign publishing.publications.maven
    }
}

tasks.withType(Sign).configureEach {
    onlyIf { project.hasProperty('signingKey') }
}
